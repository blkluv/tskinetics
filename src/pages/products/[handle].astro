---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import { fetchProductById, fetchProducts } from '../../lib/gumroad';
import BuyNowButton from '../../components/ui/BuyNowButton.astro';
import type { GumroadProduct } from '../../lib/types';

// Get the product handle (ID) from the URL
const { handle } = Astro.params;

if (!handle) {
  throw new Error('Product ID is required');
}

// Helper function to clean markdown and HTML from text
function cleanText(text: string): string {
  if (!text) return '';
  return text
    .replace(/<[^>]*>/g, '') // Remove HTML tags
    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove markdown bold
    .replace(/\*(.*?)\*/g, '$1') // Remove markdown italic
    .replace(/\[(.*?)\]\(.*?\)/g, '$1') // Remove markdown links
    .replace(/#{1,6}\s*/g, '') // Remove markdown headers
    .replace(/`([^`]*)`/g, '$1'); // Remove markdown code backticks
}

// Fetch the specific product
let product: GumroadProduct | null = null;
let relatedProducts: GumroadProduct[] = [];
let error: string | null = null;

try {
  console.log(`Fetching product: ${handle}`);
  product = await fetchProductById(handle);
  
  if (!product) {
    return Astro.redirect('/404');
  }

  // Fetch related products (other products from the same seller)
  const allProducts = await fetchProducts(12);
  relatedProducts = allProducts
    .filter(p => p.id !== product!.id)
    .slice(0, 4);

  console.log(`Successfully fetched product: ${product.title}`);
} catch (e) {
  error = e instanceof Error ? e.message : 'Failed to fetch product';
  console.error('Error fetching product:', e);
}


---

<Layout title={product?.title || 'Product Not Found'}>
  <main class="min-h-screen relative" style="background: linear-gradient(141deg, #0F0F23, #0A0A0A)">
    <!-- Main Content -->
    <div class="pt-20 pb-16 px-4">
      {error && (
        <div class="max-w-6xl mx-auto mb-8">
          <div class="bg-red-900/50 border border-red-700 text-red-300 px-6 py-4 rounded-xl">
            <strong>Error:</strong> {error}
          </div>
        </div>
      )}

      {product && (
        <>
          <!-- Product Hero Section -->
          <div class="max-w-5xl mx-auto mb-12">
            <div class="flex flex-col lg:flex-row gap-8">
              <!-- Left: Cover Art (Bigger) -->
              <div class="lg:w-96 flex-shrink-0">
                <div class="aspect-square rounded-lg overflow-hidden bg-gray-900">
                  {product.preview_url || product.thumbnail_url || product.cover_url ? (
                    <img 
                      src={product.preview_url || product.thumbnail_url || product.cover_url}
                      alt={product.title}
                      class="w-full h-full object-cover"
                    />
                  ) : (
                    <div class="w-full h-full flex items-center justify-center text-gray-400">
                      <div class="text-center">
                        <div class="text-6xl mb-4">ðŸŽµ</div>
                        <span class="text-lg">No image available</span>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <!-- Right: Audio Samples Card (Same Height as Cover) -->
              <div class="flex-1">
                <div class="bg-[#1a1a1a] rounded-lg p-6 border border-gray-700 h-96 overflow-y-auto">
                  <!-- Section Header -->
                  <div class="mb-6">
                    <h2 class="text-xl font-semibold text-white">Previews</h2>
                  </div>

                  <!-- Sample List -->
                  <div class="space-y-3">
                    {Array.from({ length: 8 }, (_, i) => (
                      <div class="flex items-center space-x-3 p-2 hover:bg-gray-800/50 rounded transition-colors group">
                        <!-- Play Button -->
                        <button class="w-6 h-6 bg-purple-600 hover:bg-purple-700 rounded-full flex items-center justify-center text-white text-xs transition-colors">
                          â–¶
                        </button>
                        
                        <!-- Waveform Visualization -->
                        <div class="flex-1 h-8 bg-gray-800 rounded flex items-center px-2 overflow-hidden">
                          <div class="flex items-end space-x-px w-full h-5">
                            {Array.from({ length: 40 }, (_, j) => (
                              <div 
                                class="bg-purple-500 rounded-sm flex-1 opacity-60"
                                style={`height: ${Math.random() * 100}%`}
                              ></div>
                            ))}
                          </div>
                        </div>
                        
                        <!-- Sample Info -->
                        <div class="min-w-0 w-32">
                          <div class="text-white text-xs font-medium truncate">
                            Sample_{String(i + 1).padStart(2, '0')}.wav
                          </div>
                          <div class="text-gray-400 text-xs">
                            {Math.floor(Math.random() * 60 + 60)}s
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Product Info Section (Below Cover and Audio) -->
          <div class="max-w-5xl mx-auto mb-12">
            <div class="flex flex-col lg:flex-row gap-8">
              <!-- Left: Title and Description (aligned with cover) -->
              <div class="lg:w-96 flex-shrink-0 space-y-6">
                <!-- Title -->
                <div>
                  <h1 class="text-3xl md:text-4xl font-bold text-white mb-2">
                    {product.title}
                  </h1>
                  {product.tags && String(product.tags).toLowerCase().includes('new') && (
                    <span class="inline-block bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium">
                      NEW
                    </span>
                  )}
                </div>

                <!-- Description -->
                {product.description && (
                  <div class="text-gray-300 text-sm leading-relaxed">
                    <div id="description-content">
                      {cleanText(product.description).length > 200 ? 
                        cleanText(product.description).substring(0, 200) + '...' : 
                        cleanText(product.description)
                      }
                    </div>
                    {cleanText(product.description).length > 200 && (
                      <button 
                        id="description-toggle"
                        class="description-toggle text-sm mt-2"
                        data-full-description={cleanText(product.description)}
                        data-truncated-description={cleanText(product.description).substring(0, 200) + '...'}
                      >
                        View more
                      </button>
                    )}
                  </div>
                )}
              </div>

              <!-- Right: Action Button (aligned with audio card) -->
              <div class="flex-1">
                <div class="max-w-xs">
                  <BuyNowButton 
                    productId={product.id}
                    productTitle={product.title}
                    price={product.price}
                    productUrl={product.url}
                    formattedPrice={product.formatted_price}
                  />
                </div>
              </div>
            </div>
          </div>


          <!-- Related Products -->
          {relatedProducts.length > 0 && (
            <div class="max-w-6xl mx-auto">
              <div class="text-center mb-12">
                <h2 class="text-3xl font-bold text-white mb-4">You Might Also Like</h2>
                <p class="text-gray-400">Discover more sounds from our collection</p>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                {relatedProducts.map((relatedProduct) => (
                  <div class="group">
                    <a href={`/products/${relatedProduct.id}`} class="block">
                      <div class="aspect-square mb-4 overflow-hidden rounded-lg">
                        <img
                          src={relatedProduct.thumbnail_url || relatedProduct.cover_url || "/images/bg.png"}
                          alt={relatedProduct.title}
                          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                          loading="lazy"
                          onerror="this.src='/images/bg.png';"
                        />
                      </div>
                      <h3 class="text-white font-bold text-lg mb-2 group-hover:text-gray-300 transition-colors line-clamp-2">
                        {relatedProduct.title}
                      </h3>
                      <p class="text-gray-400 font-semibold">
                        {relatedProduct.formatted_price || `$${(relatedProduct.price / 100).toFixed(2)}`}
                      </p>
                    </a>
                  </div>
                ))}
              </div>
            </div>
          )}
        </>
      )}
    </div>
  </main>

    <script>
    // Description toggle functionality
    document.addEventListener('DOMContentLoaded', function() {
      const toggleButton = document.getElementById('description-toggle');
      const descriptionContent = document.getElementById('description-content');
      
      if (toggleButton && descriptionContent) {
        let isExpanded = false;
        
        toggleButton.addEventListener('click', function() {
          const fullDescription = toggleButton.getAttribute('data-full-description');
          const truncatedDescription = toggleButton.getAttribute('data-truncated-description');
          
          if (!isExpanded) {
            descriptionContent.textContent = fullDescription;
            toggleButton.textContent = 'View less';
            isExpanded = true;
          } else {
            descriptionContent.textContent = truncatedDescription;
            toggleButton.textContent = 'View more';
            isExpanded = false;
          }
        });
      }
    });
    </script>
</Layout> 